import os
import sys
import logging
import psycopg2

# Add parent directory to path so we can import our modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from scripts.utils.db_postgres import get_db_connection, init_connection_pool
from scripts.utils.db_mongo import connect_mongodb

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
)
logger = logging.getLogger(__name__)

def setup_postgres():
    """Initialize PostgreSQL database with all necessary tables"""
    try:
        # Initialize connection pool
        if not init_connection_pool():
            logger.error("Failed to initialize connection pool")
            return False
            
        # Use context manager for connection handling
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                # Create tables in order to handle dependencies
                
                # 1. Create telegram_groups (no dependencies)
                cursor.execute("""
                CREATE TABLE IF NOT EXISTS telegram_groups (
                    group_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                    telegram_id bigint NOT NULL,
                    name text NOT NULL,
                    created_at timestamp with time zone DEFAULT now(),
                    CONSTRAINT telegram_groups_pkey PRIMARY KEY (group_id),
                    CONSTRAINT telegram_groups_telegram_id_key UNIQUE (telegram_id)
                );
                
                COMMENT ON TABLE telegram_groups IS 'Almacena los grupos de Telegram monitoreados por el bot.';
                
                CREATE INDEX IF NOT EXISTS idx_telegram_groups_telegram_id
                    ON telegram_groups USING btree (telegram_id);
                """)
                
                # 2. Create tokens table with frequency-based columns
                cursor.execute("""
                CREATE TABLE IF NOT EXISTS tokens (
                    token_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                    name text NOT NULL,
                    ticker text NOT NULL,
                    blockchain text NOT NULL,
                    contract_address text NOT NULL,
                    dex text,
                    first_call_liquidity numeric(30,10),
                    supply numeric(30,10),
                    initial_call_timestamp timestamp with time zone DEFAULT now(),
                    group_call text,
                    call_price numeric(30,10),
                    token_age integer,
                    dexscreener_url text,
                    best_pair_address character varying(66),
                    group_id bigint,
                    update_interval INTEGER DEFAULT 300,
                    last_updated_at TIMESTAMPTZ DEFAULT NULL,
                    failed_updates_count INTEGER DEFAULT 0,
                    last_failure_at TIMESTAMPTZ DEFAULT NULL,
                    is_active BOOLEAN DEFAULT TRUE,
                    CONSTRAINT tokens_pkey PRIMARY KEY (token_id),
                    CONSTRAINT tokens_contract_address_key UNIQUE (contract_address),
                    CONSTRAINT tokens_group_fk FOREIGN KEY (group_id)
                        REFERENCES telegram_groups (group_id)
                );
                
                COMMENT ON TABLE tokens IS 'Registra los tokens detectados en los mensajes de Telegram.';
                
                CREATE INDEX IF NOT EXISTS idx_tokens_blockchain
                    ON tokens USING btree (blockchain);
                CREATE INDEX IF NOT EXISTS idx_tokens_contract
                    ON tokens USING btree (contract_address);
                CREATE INDEX IF NOT EXISTS idx_tokens_group_id
                    ON tokens USING btree (group_id);
                CREATE INDEX IF NOT EXISTS idx_tokens_ticker
                    ON tokens USING btree (ticker);
                CREATE INDEX IF NOT EXISTS idx_tokens_update_time 
                    ON tokens(last_updated_at, update_interval, is_active);
                """)
                
                # 3. Create telegram_messages table with telegram_message_id for deduplication
                cursor.execute("""
                CREATE TABLE IF NOT EXISTS telegram_messages (
                    message_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                    group_id bigint NOT NULL,
                    telegram_message_id bigint,
                    message_timestamp timestamp with time zone NOT NULL,
                    raw_text text NOT NULL,
                    sender_id bigint NOT NULL,
                    is_call boolean NOT NULL DEFAULT false,
                    reply_to_message_id bigint,
                    token_id bigint,
                    created_at timestamp with time zone DEFAULT now(),
                    CONSTRAINT telegram_messages_pkey PRIMARY KEY (message_id),
                    CONSTRAINT telegram_messages_group_fk FOREIGN KEY (group_id)
                        REFERENCES telegram_groups (group_id),
                    CONSTRAINT telegram_messages_token_fk FOREIGN KEY (token_id)
                        REFERENCES tokens (token_id),
                    CONSTRAINT unique_telegram_msg_per_group UNIQUE (group_id, telegram_message_id)
                );
                
                COMMENT ON TABLE telegram_messages IS 'Registra mensajes de Telegram con deduplicación.';
                
                CREATE INDEX IF NOT EXISTS idx_telegram_msg_group
                    ON telegram_messages USING btree (group_id);
                CREATE INDEX IF NOT EXISTS idx_telegram_msg_time
                    ON telegram_messages USING btree (message_timestamp DESC);
                CREATE INDEX IF NOT EXISTS idx_telegram_msg_native_id
                    ON telegram_messages USING btree (telegram_message_id);
                """)
                
                # 4. Create token_calls table
                cursor.execute("""
                CREATE TABLE IF NOT EXISTS token_calls (
                    call_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                    token_id bigint NOT NULL,
                    call_timestamp timestamp with time zone NOT NULL,
                    call_price numeric(30,10) NOT NULL,
                    message_id bigint,
                    note text,
                    created_at timestamp with time zone DEFAULT now(),
                    CONSTRAINT token_calls_pkey PRIMARY KEY (call_id),
                    CONSTRAINT token_calls_msg_fk FOREIGN KEY (message_id)
                        REFERENCES telegram_messages (message_id),
                    CONSTRAINT token_calls_token_fk FOREIGN KEY (token_id)
                        REFERENCES tokens (token_id)
                );
                
                COMMENT ON TABLE token_calls IS 'Almacena los calls de tokens.';
                
                CREATE INDEX IF NOT EXISTS idx_token_calls_time
                    ON token_calls USING btree (call_timestamp DESC);
                CREATE INDEX IF NOT EXISTS idx_token_calls_token
                    ON token_calls USING btree (token_id);
                """)
                
                # 5. Create price_metrics table
                cursor.execute("""
                CREATE TABLE IF NOT EXISTS price_metrics (
                    token_id bigint NOT NULL,
                    pair_address character varying(66),
                    timestamp timestamp with time zone NOT NULL,
                    price_native numeric,
                    price_usd numeric,
                    txns_buys integer,
                    txns_sells integer,
                    volume numeric,
                    liquidity_base numeric,
                    liquidity_quote numeric,
                    liquidity_usd numeric,
                    fdv numeric,
                    market_cap numeric,
                    mongo_id text,
                    CONSTRAINT price_metrics_pkey PRIMARY KEY (token_id, timestamp),
                    CONSTRAINT price_metrics_token_id_fkey FOREIGN KEY (token_id)
                        REFERENCES tokens (token_id)
                );
                
                CREATE INDEX IF NOT EXISTS idx_price_metrics_token_id
                    ON price_metrics USING btree (token_id);
                CREATE INDEX IF NOT EXISTS idx_price_metrics_timestamp
                    ON price_metrics USING btree (timestamp DESC);
                """)
                
                # Try to convert price_metrics to TimescaleDB hypertable
                try:
                    cursor.execute("SELECT 1 FROM pg_extension WHERE extname = 'timescaledb'")
                    if cursor.fetchone():
                        cursor.execute("""
                        SELECT create_hypertable('price_metrics', 'timestamp', 
                                               if_not_exists => TRUE);
                        """)
                        logger.info("✅ TimescaleDB hypertable created successfully")
                    else:
                        logger.warning("⚠️ TimescaleDB extension not available")
                except Exception as e:
                    logger.warning(f"⚠️ TimescaleDB hypertable creation failed: {e}")
        
        logger.info("✅ PostgreSQL database setup completed successfully")
        return True
        
    except Exception as e:
        logger.error(f"❌ Failed to set up PostgreSQL database: {e}")
        return False

def add_frequency_columns_if_needed():
    """Add frequency-based update columns if they don't already exist"""
    try:
        # Fix: Properly use the with statement for database connection
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                # Check if columns exist
                cursor.execute("""
                SELECT column_name
                FROM information_schema.columns
                WHERE table_name = 'tokens' AND column_name = 'update_interval'
                """)
                
                if not cursor.fetchone():
                    logger.info("Adding frequency-based update columns to tokens table...")
                    
                    # Add columns if they don't exist
                    cursor.execute("""
                    ALTER TABLE tokens 
                    ADD COLUMN IF NOT EXISTS update_interval INTEGER DEFAULT 300,
                    ADD COLUMN IF NOT EXISTS last_updated_at TIMESTAMPTZ DEFAULT NULL,
                    ADD COLUMN IF NOT EXISTS failed_updates_count INTEGER DEFAULT 0,
                    ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT TRUE
                    """)
                    
                    # Create index
                    cursor.execute("""
                    CREATE INDEX IF NOT EXISTS idx_tokens_update_time 
                    ON tokens(last_updated_at, update_interval, is_active)
                    """)
                    
                    logger.info("✅ Frequency-based update columns added successfully")
                else:
                    logger.info("Frequency-based update columns already exist")
        
        return True
    except Exception as e:
        logger.error(f"❌ Failed to add frequency-based update columns: {e}")
        return False

def ensure_telegram_message_id_column():
    """
    Ensure the telegram_message_id column exists in telegram_messages table.
    This function is needed to update existing databases that may not have this column.
    """
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                # Check if the column already exists
                cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'telegram_messages' AND column_name = 'telegram_message_id'
                """)
                
                if not cursor.fetchone():
                    logger.info("Adding telegram_message_id column to telegram_messages table...")
                    
                    # Add the column
                    cursor.execute("""
                    ALTER TABLE telegram_messages 
                    ADD COLUMN telegram_message_id bigint
                    """)
                    
                    # Create unique constraint for deduplication
                    cursor.execute("""
                    CREATE UNIQUE INDEX IF NOT EXISTS unique_telegram_msg_per_group 
                    ON telegram_messages(group_id, telegram_message_id) 
                    WHERE telegram_message_id IS NOT NULL
                    """)
                    
                    # Create index for faster lookups
                    cursor.execute("""
                    CREATE INDEX IF NOT EXISTS idx_telegram_msg_native_id
                    ON telegram_messages USING btree (telegram_message_id)
                    """)
                    
                    logger.info("✅ telegram_message_id column added successfully")
                else:
                    logger.info("telegram_message_id column already exists")
                    
        return True
    except Exception as e:
        logger.error(f"❌ Failed to add telegram_message_id column: {e}")
        return False

def test_mongo_connection():
    """Test MongoDB connection and create indexes."""
    try:
        client = connect_mongodb()
        if not client:
            return False
            
        db_name = os.environ.get("MONGO_DB", "tgbot_db")
        collection_name = os.environ.get("MONGO_COLLECTION", "dexscreener_data")
        
        # Create collection and indexes
        collection = client[db_name][collection_name]
        collection.create_index([("processed", 1)])
        collection.create_index([("created_at", -1)])
        collection.create_index([("blockchain", 1)])
        
        logger.info(f"MongoDB connection successful. Available databases: {client.list_database_names()}")
        client.close()
        return True
    except Exception as e:
        logger.error(f"Failed to connect to MongoDB: {e}")
        return False

if __name__ == "__main__":
    logger.info("Starting database setup process...")
    
    try:
        # Test MongoDB connection
        logger.info("Testing MongoDB connection...")
        if not test_mongo_connection():
            raise Exception("MongoDB connection failed")
        
        # Setup PostgreSQL database
        logger.info("Setting up PostgreSQL database...")
        if not setup_postgres():
            raise Exception("PostgreSQL setup failed")
        
        # Add frequency-based update columns if not already present
        logger.info("Checking for frequency-based update columns...")
        if not add_frequency_columns_if_needed():
            logger.warning("⚠️ Failed to add frequency-based update columns")
        
        # Make sure the telegram_message_id column exists
        logger.info("Ensuring telegram_message_id column exists...")
        if not ensure_telegram_message_id_column():
            logger.warning("⚠️ Failed to ensure telegram_message_id column exists")
        
        logger.info("✅ Database setup completed successfully!")
    except Exception as e:
        logger.error(f"❌ Database setup failed: {e}")
        sys.exit(1)
